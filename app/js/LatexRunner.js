//@ sourceMappingURL=LatexRunner.map
// Generated by CoffeeScript 1.6.0
(function() {
  var CommandRunner, LatexRunner, Metrics, Path, ProcessTable, Settings, logger;

  Path = require("path");

  Settings = require("settings-sharelatex");

  logger = require("logger-sharelatex");

  Metrics = require("./Metrics");

  CommandRunner = require("./CommandRunner");

  ProcessTable = {};

  module.exports = LatexRunner = {
    runLatex: function(project_id, options, callback) {
      var command, compiler, directory, environment, flags, id, image, mainFile, timeout, _ref;
      if (callback == null) {
        callback = function(error) {};
      }
      directory = options.directory, mainFile = options.mainFile, compiler = options.compiler, timeout = options.timeout, image = options.image, environment = options.environment, flags = options.flags;
      compiler || (compiler = "pdflatex");
      timeout || (timeout = 60000);
      logger.log({
        directory: directory,
        compiler: compiler,
        timeout: timeout,
        mainFile: mainFile,
        environment: environment,
        flags: flags
      }, "starting compile");
      mainFile = mainFile.replace(/\.(Rtex|md|Rmd)$/, ".tex");
      if (compiler === "pdflatex") {
        command = LatexRunner._pdflatexCommand(mainFile, flags);
      } else if (compiler === "latex") {
        command = LatexRunner._latexCommand(mainFile, flags);
      } else if (compiler === "xelatex") {
        command = LatexRunner._xelatexCommand(mainFile, flags);
      } else if (compiler === "lualatex") {
        command = LatexRunner._lualatexCommand(mainFile, flags);
      } else {
        return callback(new Error("unknown compiler: " + compiler));
      }
      if ((_ref = Settings.clsi) != null ? _ref.strace : void 0) {
        command = ["strace", "-o", "strace", "-ff"].concat(command);
      }
      id = "" + project_id;
      return ProcessTable[id] = CommandRunner.run(project_id, command, directory, image, timeout, environment, function(error, output) {
        var failed, runs, stats, stderr, timings, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
        delete ProcessTable[id];
        if (error != null) {
          return callback(error);
        }
        runs = (output != null ? (_ref1 = output.stderr) != null ? (_ref2 = _ref1.match(/^Run number \d+ of .*latex/mg)) != null ? _ref2.length : void 0 : void 0 : void 0) || 0;
        failed = (output != null ? (_ref3 = output.stdout) != null ? _ref3.match(/^Latexmk: Errors/m) : void 0 : void 0) != null ? 1 : 0;
        stats = {};
        stats["latexmk-errors"] = failed;
        stats["latex-runs"] = runs;
        stats["latex-runs-with-errors"] = failed ? runs : 0;
        stats["latex-runs-" + runs] = 1;
        stats["latex-runs-with-errors-" + runs] = failed ? 1 : 0;
        timings = {};
        stderr = output != null ? output.stderr : void 0;
        timings["cpu-percent"] = (stderr != null ? (_ref4 = stderr.match(/Percent of CPU this job got: (\d+)/m)) != null ? _ref4[1] : void 0 : void 0) || 0;
        timings["cpu-time"] = (stderr != null ? (_ref5 = stderr.match(/User time.*: (\d+.\d+)/m)) != null ? _ref5[1] : void 0 : void 0) || 0;
        timings["sys-time"] = (stderr != null ? (_ref6 = stderr.match(/System time.*: (\d+.\d+)/m)) != null ? _ref6[1] : void 0 : void 0) || 0;
        return callback(error, output, stats, timings);
      });
    },
    killLatex: function(project_id, callback) {
      var id;
      if (callback == null) {
        callback = function(error) {};
      }
      id = "" + project_id;
      logger.log({
        id: id
      }, "killing running compile");
      if (ProcessTable[id] == null) {
        logger.warn({
          id: id
        }, "no such project to kill");
        return callback(null);
      } else {
        return CommandRunner.kill(ProcessTable[id], callback);
      }
    },
    _latexmkBaseCommand: function(flags) {
      var args, _ref;
      args = ["latexmk", "-cd", "-f", "-jobname=output", "-auxdir=$COMPILE_DIR", "-outdir=$COMPILE_DIR", "-synctex=1", "-interaction=batchmode"];
      if (flags) {
        args = args.concat(flags);
      }
      return ((Settings != null ? (_ref = Settings.clsi) != null ? _ref.latexmkCommandPrefix : void 0 : void 0) || []).concat(args);
    },
    _pdflatexCommand: function(mainFile, flags) {
      return LatexRunner._latexmkBaseCommand(flags).concat(["-pdf", Path.join("$COMPILE_DIR", mainFile)]);
    },
    _latexCommand: function(mainFile, flags) {
      return LatexRunner._latexmkBaseCommand(flags).concat(["-pdfdvi", Path.join("$COMPILE_DIR", mainFile)]);
    },
    _xelatexCommand: function(mainFile, flags) {
      return LatexRunner._latexmkBaseCommand(flags).concat(["-xelatex", Path.join("$COMPILE_DIR", mainFile)]);
    },
    _lualatexCommand: function(mainFile, flags) {
      return LatexRunner._latexmkBaseCommand(flags).concat(["-lualatex", Path.join("$COMPILE_DIR", mainFile)]);
    }
  };

}).call(this);
