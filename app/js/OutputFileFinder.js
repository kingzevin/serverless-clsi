//@ sourceMappingURL=OutputFileFinder.map
// Generated by CoffeeScript 1.6.0
(function() {
  var OutputFileFinder, Path, async, fs, logger, spawn,
    __slice = [].slice;

  async = require("async");

  fs = require("fs");

  Path = require("path");

  spawn = require("child_process").spawn;

  logger = require("logger-sharelatex");

  module.exports = OutputFileFinder = {
    findOutputFiles: function(resources, directory, callback) {
      var incomingResources, resource, _i, _len;
      if (callback == null) {
        callback = function(error, outputFiles, allFiles) {};
      }
      incomingResources = {};
      for (_i = 0, _len = resources.length; _i < _len; _i++) {
        resource = resources[_i];
        incomingResources[resource.path] = true;
      }
      return OutputFileFinder._getAllFiles(directory, function(error, allFiles) {
        var file, outputFiles, _j, _len1, _ref;
        if (allFiles == null) {
          allFiles = [];
        }
        if (error != null) {
          logger.err({
            err: error
          }, "error finding all output files");
          return callback(error);
        }
        outputFiles = [];
        for (_j = 0, _len1 = allFiles.length; _j < _len1; _j++) {
          file = allFiles[_j];
          if (!incomingResources[file]) {
            outputFiles.push({
              path: file,
              type: (_ref = file.match(/\.([^\.]+)$/)) != null ? _ref[1] : void 0
            });
          }
        }
        return callback(null, outputFiles, allFiles);
      });
    },
    _getAllFiles: function(directory, _callback) {
      var EXCLUDE_DIRS, args, callback, proc, stdout;
      if (_callback == null) {
        _callback = function(error, fileList) {};
      }
      callback = function(error, fileList) {
        _callback(error, fileList);
        return _callback = function() {};
      };
      EXCLUDE_DIRS = ["-name", ".cache", "-o", "-name", ".archive", "-o", "-name", ".project-*"];
      args = [directory, "("].concat(__slice.call(EXCLUDE_DIRS), [")"], ["-prune"], ["-o"], ["-type"], ["f"], ["-print"]);
      logger.log({
        args: args
      }, "running find command");
      proc = spawn("find", args);
      stdout = "";
      proc.stdout.on("data", function(chunk) {
        return stdout += chunk.toString();
      });
      proc.on("error", callback);
      return proc.on("close", function(code) {
        var fileList;
        if (code !== 0) {
          logger.warn({
            directory: directory,
            code: code
          }, "find returned error, directory likely doesn't exist");
          return callback(null, []);
        }
        fileList = stdout.trim().split("\n");
        fileList = fileList.map(function(file) {
          var path;
          return path = Path.relative(directory, file);
        });
        return callback(null, fileList);
      });
    }
  };

}).call(this);
