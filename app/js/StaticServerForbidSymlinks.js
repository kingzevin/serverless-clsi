//@ sourceMappingURL=StaticServerForbidSymlinks.map
// Generated by CoffeeScript 1.6.0
(function() {
  var ForbidSymlinks, Path, Settings, fs, logger, url;

  Path = require("path");

  fs = require("fs");

  Settings = require("settings-sharelatex");

  logger = require("logger-sharelatex");

  url = require("url");

  module.exports = ForbidSymlinks = function(staticFn, root, options) {
    var basePath, expressStatic;
    expressStatic = staticFn(root, options);
    basePath = Path.resolve(root);
    return function(req, res, next) {
      var dir, file, path, project_id, requestedFsPath, result, _i, _len, _ref, _ref1;
      path = (_ref = url.parse(req.url)) != null ? _ref.pathname : void 0;
      if (result = path.match(/^\/?([a-zA-Z0-9_-]+)\/(.*)/)) {
        project_id = result[1];
        file = result[2];
      } else {
        logger.warn({
          path: path
        }, "unrecognized file request");
        return res.sendStatus(404);
      }
      _ref1 = file.split('/');
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        dir = _ref1[_i];
        if (dir === '..') {
          logger.warn({
            path: path
          }, "attempt to use a relative path");
          return res.sendStatus(404);
        }
      }
      requestedFsPath = "" + basePath + "/" + project_id + "/" + file;
      if (requestedFsPath !== Path.normalize(requestedFsPath)) {
        logger.error({
          path: requestedFsPath
        }, "requestedFsPath is not normalized");
        return res.sendStatus(404);
      }
      return fs.realpath(requestedFsPath, function(err, realFsPath) {
        if (err != null) {
          if (err.code === 'ENOENT') {
            return res.sendStatus(404);
          } else {
            logger.error({
              err: err,
              requestedFsPath: requestedFsPath,
              realFsPath: realFsPath,
              path: req.params[0],
              project_id: req.params.project_id
            }, "error checking file access");
            return res.sendStatus(500);
          }
        } else if (requestedFsPath !== realFsPath) {
          logger.warn({
            requestedFsPath: requestedFsPath,
            realFsPath: realFsPath,
            path: req.params[0],
            project_id: req.params.project_id
          }, "trying to access a different file (symlink), aborting");
          return res.sendStatus(404);
        } else {
          return expressStatic(req, res, next);
        }
      });
    };
  };

}).call(this);
