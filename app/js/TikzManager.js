//@ sourceMappingURL=TikzManager.map
// Generated by CoffeeScript 1.6.0
(function() {
  var Path, ResourceWriter, SafeReader, TikzManager, fs, logger;

  fs = require("fs");

  Path = require("path");

  ResourceWriter = require("./ResourceWriter");

  SafeReader = require("./SafeReader");

  logger = require("logger-sharelatex");

  module.exports = TikzManager = {
    checkMainFile: function(compileDir, mainFile, resources, callback) {
      var resource, _i, _len;
      if (callback == null) {
        callback = function(error, needsMainFile) {};
      }
      for (_i = 0, _len = resources.length; _i < _len; _i++) {
        resource = resources[_i];
        if (resource.path === "output.tex") {
          logger.log({
            compileDir: compileDir,
            mainFile: mainFile
          }, "output.tex already in resources");
          return callback(null, false);
        }
      }
      return ResourceWriter.checkPath(compileDir, mainFile, function(error, path) {
        if (error != null) {
          return callback(error);
        }
        return SafeReader.readFile(path, 65536, "utf8", function(error, content) {
          var needsMainFile, usesPsTool, usesTikzExternalize;
          if (error != null) {
            return callback(error);
          }
          usesTikzExternalize = (content != null ? content.indexOf("\\tikzexternalize") : void 0) >= 0;
          usesPsTool = (content != null ? content.indexOf("{pstool}") : void 0) >= 0;
          logger.log({
            compileDir: compileDir,
            mainFile: mainFile,
            usesTikzExternalize: usesTikzExternalize,
            usesPsTool: usesPsTool
          }, "checked for packages needing main file as output.tex");
          needsMainFile = usesTikzExternalize || usesPsTool;
          return callback(null, needsMainFile);
        });
      });
    },
    injectOutputFile: function(compileDir, mainFile, callback) {
      if (callback == null) {
        callback = function(error) {};
      }
      return ResourceWriter.checkPath(compileDir, mainFile, function(error, path) {
        if (error != null) {
          return callback(error);
        }
        return fs.readFile(path, "utf8", function(error, content) {
          if (error != null) {
            return callback(error);
          }
          logger.log({
            compileDir: compileDir,
            mainFile: mainFile
          }, "copied file to output.tex as project uses packages which require it");
          return fs.writeFile(Path.join(compileDir, "output.tex"), content, {
            flag: 'wx'
          }, callback);
        });
      });
    }
  };

}).call(this);
