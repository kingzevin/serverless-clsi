//@ sourceMappingURL=UrlFetcher.map
// Generated by CoffeeScript 1.6.0
(function() {
  var URL, UrlFetcher, fs, logger, oneMinute, request, settings;

  request = require("request").defaults({
    jar: false
  });

  fs = require("fs");

  logger = require("logger-sharelatex");

  settings = require("settings-sharelatex");

  URL = require('url');

  oneMinute = 60 * 1000;

  module.exports = UrlFetcher = {
    pipeUrlToFile: function(url, filePath, _callback) {
      var callbackOnce, p, timeoutHandler, urlStream;
      if (_callback == null) {
        _callback = function(error) {};
      }
      callbackOnce = function(error) {
        if (typeof timeoutHandler !== "undefined" && timeoutHandler !== null) {
          clearTimeout(timeoutHandler);
        }
        _callback(error);
        return _callback = function() {};
      };
      if (settings.filestoreDomainOveride != null) {
        p = URL.parse(url).path;
        url = "" + settings.filestoreDomainOveride + p;
      }
      timeoutHandler = setTimeout(function() {
        timeoutHandler = null;
        logger.error({
          url: url,
          filePath: filePath
        }, "Timed out downloading file to cache");
        return callbackOnce(new Error("Timed out downloading file to cache " + url));
      }, 3 * oneMinute);
      logger.log({
        url: url,
        filePath: filePath
      }, "started downloading url to cache");
      urlStream = request.get({
        url: url,
        timeout: oneMinute
      });
      urlStream.pause();
      urlStream.on("error", function(error) {
        logger.error({
          err: error,
          url: url,
          filePath: filePath
        }, "error downloading url");
        return callbackOnce(error || new Error("Something went wrong downloading the URL " + url));
      });
      urlStream.on("end", function() {
        return logger.log({
          url: url,
          filePath: filePath
        }, "finished downloading file into cache");
      });
      return urlStream.on("response", function(res) {
        var fileStream;
        if (res.statusCode >= 200 && res.statusCode < 300) {
          fileStream = fs.createWriteStream(filePath);
          fileStream.on('error', function(error) {
            logger.error({
              err: error,
              url: url,
              filePath: filePath
            }, "error writing file into cache");
            return fs.unlink(filePath, function(err) {
              if (err != null) {
                logger.err({
                  err: err,
                  filePath: filePath
                }, "error deleting file from cache");
              }
              return callbackOnce(error);
            });
          });
          fileStream.on('finish', function() {
            logger.log({
              url: url,
              filePath: filePath
            }, "finished writing file into cache");
            return callbackOnce();
          });
          fileStream.on('pipe', function() {
            return logger.log({
              url: url,
              filePath: filePath
            }, "piping into filestream");
          });
          urlStream.pipe(fileStream);
          return urlStream.resume();
        } else {
          logger.error({
            statusCode: res.statusCode,
            url: url,
            filePath: filePath
          }, "unexpected status code downloading url to cache");
          urlStream.resume();
          return callbackOnce(new Error("URL returned non-success status code: " + res.statusCode + " " + url));
        }
      });
    }
  };

}).call(this);
