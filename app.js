//@ sourceMappingURL=app.map
// Generated by CoffeeScript 1.6.0
(function () {
  const runmiddlewareFlag = true;
  var CompileController, ContentTypeMapper, Errors, ForbidSymlinks, Metrics, OutputCacheManager, Path, ProjectPersistenceManager, STATE, Settings, TIMEOUT, app, bodyParser, express, fs, host, loadHttpServer, loadTcpServer, load_http_port, load_tcp_port, logger, net, os, port, profiler, resCacher, staticServer, tenMinutes, _ref, _ref1, _ref2, _ref3, _ref4;

  Metrics = require("metrics-sharelatex");

  Metrics.initialize("clsi");

  CompileController = require("./app/js/CompileController");

  Settings = require("settings-sharelatex");

  logger = require("logger-sharelatex");

  logger.initialize("clsi");

  if (((_ref = Settings.sentry) != null ? _ref.dsn : void 0) != null) {
    logger.initializeErrorReporting(Settings.sentry.dsn);
  }

  ContentTypeMapper = require("./app/js/ContentTypeMapper");

  Errors = require('./app/js/Errors');

  Path = require("path");

  fs = require("fs");

  Metrics.open_sockets.monitor(logger);

  Metrics.memory.monitor(logger);

  ProjectPersistenceManager = require("./app/js/ProjectPersistenceManager");

  OutputCacheManager = require("./app/js/OutputCacheManager");

  require("./app/js/db").sync();

  express = require("express");

  bodyParser = require("body-parser");

  app = express();
  // zevin
  if (runmiddlewareFlag == true) {
    const runMiddleware = require('run-middleware');
    runMiddleware(app);
  }
  Metrics.injectMetricsRoute(app);

  app.use(Metrics.http.monitor(logger));

  TIMEOUT = 10 * 60 * 1000;

  if (runmiddlewareFlag == false)
    app.use(function (req, res, next) {
      req.setTimeout(TIMEOUT);
      res.setTimeout(TIMEOUT);
      res.removeHeader("X-Powered-By");
      return next();
    });

  app.param('project_id', function (req, res, next, project_id) {
    if (project_id != null ? project_id.match(/^[a-zA-Z0-9_-]+$/) : void 0) {
      return next();
    } else {
      return next(new Error("invalid project id"));
    }
  });

  app.param('user_id', function (req, res, next, user_id) {
    if (user_id != null ? user_id.match(/^[0-9a-f]{24}$/) : void 0) {
      return next();
    } else {
      return next(new Error("invalid user id"));
    }
  });

  app.param('build_id', function (req, res, next, build_id) {
    if (build_id != null ? build_id.match(OutputCacheManager.BUILD_REGEX) : void 0) {
      return next();
    } else {
      return next(new Error("invalid build id " + build_id));
    }
  });

  app.post("/project/:project_id/compile", bodyParser.json({
    limit: Settings.compileSizeLimit
  }), CompileController.compile);

  app.post("/project/:project_id/compile/stop", CompileController.stopCompile);

  app["delete"]("/project/:project_id", CompileController.clearCache);

  app.get("/project/:project_id/sync/code", CompileController.syncFromCode);

  app.get("/project/:project_id/sync/pdf", CompileController.syncFromPdf);

  app.get("/project/:project_id/wordcount", CompileController.wordcount);

  app.get("/project/:project_id/status", CompileController.status);

  app.post("/project/:project_id/user/:user_id/compile", bodyParser.json({
    limit: Settings.compileSizeLimit
  }), CompileController.compile);

  app.post("/project/:project_id/user/:user_id/compile/stop", CompileController.stopCompile);

  app["delete"]("/project/:project_id/user/:user_id", CompileController.clearCache);

  app.get("/project/:project_id/user/:user_id/sync/code", CompileController.syncFromCode);

  app.get("/project/:project_id/user/:user_id/sync/pdf", CompileController.syncFromPdf);

  app.get("/project/:project_id/user/:user_id/wordcount", CompileController.wordcount);

  ForbidSymlinks = require("./app/js/StaticServerForbidSymlinks");

  staticServer = ForbidSymlinks(express["static"], Settings.path.compilesDir, {
    setHeaders: function (res, path, stat) {
      var etag;
      if (Path.basename(path) === "output.pdf") {
        etag = function (path, stat) {
          return '"' + Math.ceil(+stat.mtime / 1000).toString(16) + '-' + Number(stat.size).toString(16) + '"';
        };
        res.set("Etag", etag(path, stat));
      }
      return res.set("Content-Type", ContentTypeMapper.map(path));
    }
  });

  app.get("/project/:project_id/user/:user_id/build/:build_id/output/*", function (req, res, next) {
    req.url = ("/" + req.params.project_id + "-" + req.params.user_id + "/") + OutputCacheManager.path(req.params.build_id, "/" + req.params[0]);
    return staticServer(req, res, next);
  });

  app.get("/project/:project_id/build/:build_id/output/*", function (req, res, next) {
    req.url = ("/" + req.params.project_id + "/") + OutputCacheManager.path(req.params.build_id, "/" + req.params[0]);
    return staticServer(req, res, next);
  });

  app.get("/project/:project_id/user/:user_id/output/*", function (req, res, next) {
    req.url = "/" + req.params.project_id + "-" + req.params.user_id + "/" + req.params[0];
    return staticServer(req, res, next);
  });

  app.get("/project/:project_id/output/*", function (req, res, next) {
    var _ref1;
    if ((((_ref1 = req.query) != null ? _ref1.build : void 0) != null) && req.query.build.match(OutputCacheManager.BUILD_REGEX)) {
      req.url = ("/" + req.params.project_id + "/") + OutputCacheManager.path(req.query.build, "/" + req.params[0]);
    } else {
      req.url = "/" + req.params.project_id + "/" + req.params[0];
    }
    return staticServer(req, res, next);
  });

  app.get("/oops", function (req, res, next) {
    logger.error({
      err: "hello"
    }, "test error");
    return res.send("error\n");
  });

  app.get("/status", function (req, res, next) {
    return res.send("CLSI is alive\n");
  });

  resCacher = {
    contentType: function (setContentType) {
      this.setContentType = setContentType;
    },
    send: function (code, body) {
      this.code = code;
      this.body = body;
    },
    code: 500,
    body: {},
    setContentType: "application/json"
  };

  app.get("/health_check", function (req, res) {
    res.contentType(resCacher != null ? resCacher.setContentType : void 0);
    return res.status(resCacher != null ? resCacher.code : void 0).send(resCacher != null ? resCacher.body : void 0);
  });

  profiler = require("v8-profiler-node8");

  app.get("/profile", function (req, res) {
    var time;
    time = parseInt(req.query.time || "1000");
    profiler.startProfiling("test");
    return setTimeout(function () {
      var profile;
      profile = profiler.stopProfiling("test");
      return res.json(profile);
    }, time);
  });

  app.get("/heapdump", function (req, res) {
    return require('heapdump').writeSnapshot('/tmp/' + Date.now() + '.clsi.heapsnapshot', function (err, filename) {
      return res.send(filename);
    });
  });

  app.use(function (error, req, res, next) {
    if (error instanceof Errors.NotFoundError) {
      logger.warn({
        err: error,
        url: req.url
      }, "not found error");
      return res.sendStatus(404);
    } else {
      logger.error({
        err: error,
        url: req.url
      }, "server error");
      return res.sendStatus((error != null ? error.statusCode : void 0) || 500);
    }
  });

  port = ((_ref1 = Settings.internal) != null ? (_ref2 = _ref1.clsi) != null ? _ref2.port : void 0 : void 0) || 3013;

  host = ((_ref3 = Settings.internal) != null ? (_ref4 = _ref3.clsi) != null ? _ref4.host : void 0 : void 0) || "localhost";

  if (runmiddlewareFlag == false) {
    app.listen(port, host, function (error) {
      return logger.info("CLSI starting up, listening on " + host + ":" + port);
    });
  }

  setInterval(function () {
    return ProjectPersistenceManager.clearExpiredProjects();
  }, tenMinutes = 10 * 60 * 1000);
  // zevin
  exports.main = test;

  function test(params = {}) {
    // params e.g.: {
    //  url: '/user/5dea50e08912bd02137651c2/check',
    //  method: 'post',
    //  words: ["yess", "sharelatex"],
    //  language: 'en'
    // }

    const url = params.url || '/project/5e9724266a66f10065ea52ae/compile';
    // const url = params.url || '/status';
    const method = params.__ow_method || 'post';
    // const method = params.__ow_method || 'get';
    const filestoreHost = Settings.apis.filestore ? Settings.apis.filestore.url.host : "172.25.0.1";
    params.compile = params.compile || {
      "options": {
        "compiler": "pdflatex",
        "timeout": 180,
        "draft": false,
        "check": "silent",
        "syncType": "full",
      },
      "rootResourcePath": "main.tex",
      "resources": [
        {
          "path": "main.tex",
          "content": "\\documentclass{article}\n\\usepackage[utf8]{inputenc}\n\\usepackage{graphicx}\n\\graphicspath{ {./} }\n\n\\title{1}\n\\author{1 }\n\\date{April 2020}\n\n\\begin{document}\n\n\\maketitle\n\\input{sections/1}\n\n\\section{Introduction}\nyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyessyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssssss\nsdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfysdfsdfsdfsdf zdxf aser wge sfg rtq sf asdf asdf sadf adf \nesssdfsdfyesssdfsdfye sdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdf\n\n\\end{document}\n"
          // "content": "\\documentclass{article}\n\\usepackage[utf8]{inputenc}\n\\usepackage{graphicx}\n\\graphicspath{ {./} }\n\n\\title{1}\n\\author{1 }\n\\date{April 2020}\n\n\\begin{document}\n\n\\maketitle\n\\input{sections/1}\n\n\\section{Introduction}\nyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyessyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssssss\nsdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfysdfsdfsdfsdf zdxf aser wge sfg rtq sf asdf asdf sadf adf \nesssdfsdfyesssdfsdfye sdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdfyesssdfsdf\n\n\\includegraphics[scale=0.01]{labixiaoxin}\n\n\\end{document}\n"
        },
        {
          "path": "sections/1.tex",
          "content": "\\section{Design Overview}\n\nWe are witnessing an emerging trend that more Internet."
        }
        // ,{
        //   "path": "labixiaoxi.jpg",
        //   "url": "http://filestore:3009/project/5e9724266a66f10065ea52ae/file/5e9c5aef5214770077909383",
        //   "modified": 1587305199073
        // }
      ]
    }

    params.compile.resources.forEach(element => {
      if (element.url) {
        element.url = element.url.replace("filestore", filestoreHost);
      }
    });

    function invoke(url, bodyJSON) {
      return new Promise((resolve, reject) => {
        app.runMiddleware(url, bodyJSON, (code, data) => {
          if (code == 200)
            resolve({ body: data });
          else
            reject({ body: { code, data } })
        })
      });
    }

    const { promisify } = require('util')
    const request = require("request")
    const reqPromise = promisify(request[method]);
    return (async () => {
      let result;
      if (runmiddlewareFlag == true) {
        result = await invoke(url, { method, body: params });
      } else {
        result = await reqPromise({
          // url: `http://${host}:${port}/${url}`,
          url: `http://localhost:3013${url}`,
          json: params
        })
      }
      return result.body.compile
      // return {body: result.body}
    })();
  }

  if (!module.parent) {
    (async () => {
      let result = await test();
      console.log(result);
    })();
  }

}).call(this);
